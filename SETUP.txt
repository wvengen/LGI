


                         HOW TO SETUP LGI
                         ----------------

In this document a howto is presented on the setup of LGI. The document
is divided into four parts. Part I will show you how to setup a resource
within an existing LGI project, part II will show you how to setup a new
LGI project with a project server. Part III will show you how to add an 
extra project server into an existing LGI project. The last part part IV
will detail on the maintenance of your LGI project servers.



Part I : Howto setup a resource 
-------------------------------

Setting up a resource within an LGI project is rather easy. Just follow the
following steps:

- Untar or checkout the source tree in '~/LGI'.

- Get in contact with the project administrator to get the X.509 certificate
  and a private key for your resource.

- Copy the key and certificate files into the '~/LGI/certificates' directory.

- Make sure that libcurl is installed. Visit http://curl.haxx.se/libcurl/ if
  you do not have this yet.

- Go to the '~/LGI/daemon/src' directory and invoke make. If you have a
  different compiler installed than GNU's g++, or you have libcurl installed
  in a different location, adjust the first few lines of the file Makefile to
  your needs.

- If you want, you can also invoke make with the 'make install' command. If
  you do that the directory '~/LGI/daemon/bin' will be created and you can
  include that in your PATH for convencience.

- Edit the '~/LGI/daemon/LGI.cfg' example configuration file. It has been
  setup to run the hello_world application by just simple forking scripts.
  Other example scripts on how to use the 'hello_world' example using Torque
  / PBS or LoadLeveler are included to in the corresponding '~/LGI/daemon/
  hello_world_XX_scripts' subdirectories. Please make sure you refer to
  the right LGI project server, use the correct project name and use the
  correct private key and certificate files from the '~/LGI/certificates'
  directory. Also be sure to use absolute paths in the configuration file
  so it is possible to invoke the daemon from any other directory. Finally
  set the run directory correctly if you do not want it to be the default.

- Start the daemon by invoking the daemon like:

  ~/LGI/daemon/src/LGI_daemon -l ~/LGI/daemon/LGI.log ~/LGI/daemon/LGI.cfg

 You can now inspect the log file '~/LGI/daemon/LGI.log' and see if everything
 was setup correctly.

- You can gracefully stop the dameon by sending it a 'kill' signal:

  killall LGI_daemon

  While the daemon is running, you can edit the configuration file without any
  problems. You can also edit the scripts in the mean time, only newly spawned
  jobs will be affected by these changes. 

Keep in mind for a project administrator, you should also include the new resource
into the projects database. See part IV for an example.



Part II : Howto setup a project server 
--------------------------------------

Setting up your own project is not too hard either. You can decide to be
a fully independent project by setting up your own X.509 Certificate
Authority, or you can decide to be a sub project and thus be an X.509 sub-CA
of the LGI-CA. In this part, it is shown how to become an independant project
and be your own X.509 CA.

- Make sure libcurl, Perl, PHP, MySQL, Apache and OpenSSL are installed on 
  your system.

- Make sure MySQL is configured correctly and mysqld is running.

- Make sure PHP is configured correctly. It is highly recommended that you
  also correctly instal PHP PEAR so that you can install the APC PHP PECL 
  module too. It will enable caching of PHP bytecode from the ZEND engine
  and enhance the PHP performance significantly.

- Switch to the user apache and make sure you install the source tree
  into the home of user apache where it will be served:

  sudo su -l -s /bin/bash apache 

  tar -zxf LGI.tar.gz -C /var/www/html

- Use OpenSSL to create a CA private key and certificate with which you can
  create and sign your project server, resource and client certificates:

  Start by creating a private key for your CA:

    openssl genrsa -out /var/www/html/LGI/certificates/exampleCA.key 4096    

  Then create an X.509 selfsigned certificate for it:

    openssl req -new -x509 -days 365 -set_serial 0 -extensions v3_ca 
            -key /var/www/html/LGI/certificates/exampleCA.key 
            -out /var/www/html/LGI/certificates/exampleCA.crt

  and create a CA serial number file:

    echo "0100" > /var/www/html/LGI/certificates/exampleCA.srl 

  Now create a private key for your server:
 
    openssl genrsa -out /var/www/html/LGI/certificates/exampleserver.key 4096

  Then create a sign request for it:

    openssl req -new -key /var/www/html/LGI/certificates/exampleserver.key 
            -out /var/www/html/LGI/certificates/exampleserver.crs

  and in filling in the commonname of the CA certificate, be sure to use the 
  correct LGI format 'apache@exampleserver.somewhere.org; exampleprojectname'.

  Now create the CA signed server certificate from this request:

    openssl x509 -req -in /var/www/html/LGI/certificates/exampleserver.crs
            -days 365 -CA /var/www/html/LGI/certificates/exampleCA.crt
            -CAkey /var/www/html/LGI/certificates/exampleCA.key 
            -CAserial /var/www/html/LGI/certificates/exampleCA.srl 
            -out /var/www/html/LGI/certificates/exampleserver.crt

  You should now safely store the CA private key file somewere not on
  this server computer that is conected to the internet. Or, at least, if
  you do not do that, encrypt the file using a password protection:

    openssl aes-256-cbc -e -in /var/www/html/LGI/certificates/exampleCA.key
            -out /var/www/html/LGI/certificates/exampleCA.key.aes; rm 
            /var/www/html/LGI/certificates/exampleCA.key

  Now copy the public certificates to a place that Apache will serve:

    cp /var/www/html/LGI/certificates/exampleCA.crt /var/www/html/LGI

    cp /var/www/html/LGI/certificates/exampleserver.crt /var/www/html/LGI

- Make sure Apache is setup correctly to use client and server certificates
  for https and check that the following options have been set correctly into
  the https virtual host configuration:

  SSLCertificateFile /var/www/html/LGI/certificates/exampleserver.crt
  SSLCertificateKeyFile /var/www/html/LGI/certificates/exampleserver.key
  SSLCertificateChainFile /var/www/html/LGI/certificates/exampleCA.crt
  SSLCACertificateFile /var/www/html/LGI/certificates/exampleCA.crt
  SSLVerifyClient require
  SSLVerifyDepth  5
  SSLOptions +ExportCertData

  <Files ~ "\.(cgi|shtml|phtml|php3?)$">
     SSLOptions +StdEnvVars
  </Files>

  Also make sure the AccessFileName has been set correctly in the Apache main
  configuration so that the LGI document tree can be protected by .htaccess
  files and make sure the important directories are carefully protected:

  DocumentRoot "/var/www/html"
  AccessFileName .htaccess

  <Directory "/var/www/html/LGI">
         AllowOverride All
  </Directory>

  <Directory "/var/www/html/LGI/repository/JOB_*">
        AllowOverride None
        Options -ExecCGI
        php_flag engine off
        SSLRequireSSL
        SSLRequire ( %{SSL_CLIENT_VERIFY} == "SUCCESS" )
        Script PUT /LGI/repository/put.cgi
        Script DELETE /LGI/repository/delete.cgi
        <Limit GET PUT DELETE>
             Allow from all
        </Limit>
  </Directory>

  <Directory "/var/www/html/LGI/repository">
         Deny from all
         <Files "repository_content.php">
              SSLRequireSSL
              SSLRequire ( %{SSL_CLIENT_VERIFY} == "SUCCESS" )
              Allow from all
         </Files>
         <Files "put.cgi">
              SSLRequireSSL
              SSLRequire ( %{SSL_CLIENT_VERIFY} == "SUCCESS" )
              Allow from all
              Options +ExecCGI
              AddHandler cgi-script .cgi
         </Files>
         <Files "delete.cgi">
              SSLRequireSSL
              SSLRequire ( %{SSL_CLIENT_VERIFY} == "SUCCESS" )
              Allow from all
              Options +ExecCGI
              AddHandler cgi-script .cgi
         </Files>
  </Directory>

  <Directory "/var/www/html/LGI/inc">
         Deny from all
  </Directory>

  <Directory "/var/www/html/LGI/tools">
         Deny from all
  </Directory>

  <Directory "/var/www/html/LGI/daemon">
         Deny from all
  </Directory>

  <Directory "/var/www/html/LGI/certificates">
         Deny from all
  </Directory>

  <Directory "/var/www/html/LGI/basic_interface">
         php_value upload_max_filesize 16M
         php_value post_max_size 16M
  </Directory>

  <Directory "/var/www/html/LGI/interfaces">
         php_value upload_max_filesize 16M
         php_value post_max_size 16M
  </Directory>

  <Directory "/var/www/html/LGI/resources">
         php_value upload_max_filesize 16M
         php_value post_max_size 16M
  </Directory>

  Make sure you have an .htaccess file in the '/var/www/html/LGI/certificates', 
  '/var/www/html/LGI/inc', '/var/www/html/LGI/tools' and '/var/www/html/LGI/daemon'
  directories with the content:

  Deny from all

  Make sure you have an .htaccess file in the '/var/www/html/LGI/repository'
  directory with the content:

  Deny from all
  <Files "repository_content.php">
        SSLRequireSSL
        SSLRequire ( %{SSL_CLIENT_VERIFY} == "SUCCESS" )
        Allow from all
  </Files>
  <Files "put.cgi">
        SSLRequireSSL
        SSLRequire ( %{SSL_CLIENT_VERIFY} == "SUCCESS" )
        Allow from all
        Options +ExecCGI
        AddHandler cgi-script .cgi
  </Files>
  <Files "delete.cgi">
        SSLRequireSSL
        SSLRequire ( %{SSL_CLIENT_VERIFY} == "SUCCESS" )
        Allow from all
        Options +ExecCGI
        AddHandler cgi-script .cgi
  </Files>

  Make sure you have an .htaccess file in the directories
  '/var/www/html/LGI/basic_interface', '/var/www/html/LGI/interfaces' and
  '/var/www/html/LGI/resources' with the following content:

  php_value upload_max_filesize 16M
  php_value post_max_size 16M

  Make sure you have an 'index.html' file in the subdirectories
  '/var/www/html/LGI/repository', '/var/www/html/LGI/inc', 
  '/var/www/html/LGI/interfaces', '/var/www/html/LGI/servers'
  '/var/www/html/LGI/resources', '/var/www/html/LGI/daemon', 
  '/var/www/html/LGI/tools' and '/var/www/html/LGI/certificates' 
  with the content:

  <html>
    ! No browsing allowed !
  </html>

  Finally check your Apache configuration with the 'apachectl configtest' command.

  !!!!! WORD OF CAUTION !!!!!

  The above configuration of Apache seems superfluous but ensures a secure
  environment. Please be very carefull when diverting from the above
  suggested configuration. Web application security is a complicated matter
  and a lot of care has been taken to ensure a secure default configuration
  that will work out-of-the box.

  !!!!! WORD OF CAUTION !!!!!


- Now create a MySQL user and database for your project with the database
  name equal to your project name "exampleprojectname":

  mysqladmin -u root password "yourmysqlrootpassword"

  mysqladmin -u root -p create "exampleprojectname"

  echo 'GRANT ALL PRIVILEGES ON exampleprojectname.* to 
       "examplemysqluser"@"localhost" IDENTIFIED BY "examplemysqluserpasswd"'
       | mysql -u root -p mysql

  mysql -u examplemysqluser -p exampleprojectname < /var/www/html/LGI/LGI.db

- Insert your project server entry into the database:

  export CERTIFICATE=`cat /var/www/html/LGI/certificates/exampleCA.crt`

  echo -e "INSERT INTO active_resources SET resource_name=
       'apache@exampleserver.somewhere.org',project_server=1,
       url='https://exampleserver.somewhere.org/LGI',
       client_certificate='$CERTIFICATE\n'" | mysql -u
       examplemysqluser -p exampleprojectname

- Make sure you edit the project web server configuration file 
  '/var/www/html/LGI/inc/Config.inc':

  $Config[ "SERVER_URL" ] = "https://exampleserver.somewhere.org/LGI";    
  $Config[ "SERVER_NAME" ] = "apache@exampleserver.somewhere.org"; 
  $Config[ "SERVER_SSL_CERTIFICATE_FILE" ] = "../certificates/exampleserver.crt"; 
  $Config[ "SERVER_SSL_KEY" ] = "../certificates/exampleserver.key";
  $Config[ "SERVER_SSL_CA_CERTIFICATE_URL" ] = 
           "https://exampleserver.somewhere.org/LGI/exampleCA.crt";
  $Config[ "SERVER_SSL_CA_CERTIFICATE_FILE" ] = "../certificates/exampleCA.crt";        
  $Config[ "MYSQL_URL" ] = "localhost";
  $Config[ "MYSQL_USER" ] = "examplemysqluser";
  $Config[ "MYSQL_PASSWD" ] = "examplemusqluserpasswd";
  $Config[ "MYSQL_DEFAULT_DATABASE" ] = "exampleprojectname"; 
  $Config[ "REPOSITORY_DIRECTORY" ] = "/var/www/html/LGI/repository";
  $Config[ "REPOSITORY_SERVER_NAME" ] = $Config[ "SERVER_NAME" ];
  $Config[ "REPOSITORY_URL" ]  = $Config[ "SERVER_URL" ]."/repository";   

- The last thing to do is to edit a crontab entry for the apache user

  crontab -u apache -e

  Add the following lines:
 
  MAILTO=""
  HOME=/var/www
  */10 * * * *  /usr/bin/php -f /var/www/html/LGI/tools/cron_job.php

You could also choose to use a different user account to setup your LGI
project web-server. Just be sure that the user apache is part of the group the
new user is part of too so that apache can serve the content. 

If you happen to run several projects on the same server, please adapt
the above cron_job.php file to correctly maintain all of them. This is 
done by simply adding the project name to the array of projects as is
demonstrated in cron_job.php.



Part III : Howto setup a second slave project server 
----------------------------------------------------

After having successfully setup your first LGI master project server yourself,
adding slave servers is fairly straightforward. Follow the same procedure on 
the slave server as was described in part II for the master server, but now
there is no need to setup a CA. You only have to generate a server key and a
certificate request for the slave server, and obviously sign that request with
your CA certificate.

However, at the point where you insert the server entry into the fresh database
in part II, use that command now to insert the MASTER server data into the 
slave database:

  (on the slaveserver)

  wget https://exampleserver.somewhere.org/exampleCA.crt 
       -O /var/www/html/LGI/certificates/exampleCA.crt

  wget https://exampleserver.somewhere.org/exampleserver.crt 
       -O /var/www/html/LGI/certificates/exampleserver.crt

  export CERTIFICATE=`cat /var/www/html/LGI/certificates/exampleserver.crt`

  echo -e "INSERT INTO active_resources SET resource_name=
       'apache@exampleserver.somewhere.org',project_server=1,
       url='https://exampleserver.somewhere.org/LGI',
       client_certificate='$CERTIFICATE\n'" | mysql -u
       exampleslavemysqluser -p exampleprojectname

and insert the slave server details into the master server database:

  (on the masterserver)

  wget https://exampleslaveserver.somewhere.org/exampleslaveserver.crt 
       -O /var/www/html/LGI/certificates/exampleslaveserver.crt

  export SLAVECERTIFICATE=`cat /var/www/html/LGI/certificates/exampleslaveserver.crt`

  export SLAVEINSERTQUERY="INSERT INTO active_resources SET resource_name=
       'apache@exampleslaveserver.somewhere.org',project_server=2,
       url='https://exampleslaveserver.somewhere.org/LGI',
       client_certificate='$SLAVECERTIFICATE\n'"

  export ESCAPEDSLAVEINSERTQUERY=`echo -e "$SLAVEINSERTQUERY" | sed "s/'/\\\\\'/g"`

  export UPDATEQUERY="INSERT INTO updates SET servers='any',
         update_query='$ESCAPEDSLAVEINSERTQUERY'"

  echo "$SLAVEINSERTQUERY" | mysql -u examplemysqluser -p exampleprojectname

  echo "$UPDATEQUERY" | mysql -u examplemysqluser -p exampleprojectname
  
At this point the two servers are linked together and the crontab entries
of both will ensure that any updates pending in the 'updates' table of
the master server database are transfered to the slave server. 

Users can now use both the slave and the master server independantly to submit
jobs. The resource daemon will automatically request work from all servers of 
the project.



Part IV: Updating and maintaining project servers:
--------------------------------------------------

By default on each project server, the basic interface is active and
any user is allowed to have only two jobs in the database. If you want
certain users or groups of users to be able to submit more, you can add
that user or group with a new limit for a certain application. One
should do that like:

  php -f tools/cron_job.php

  export QUERY="INSERT INTO users_allowed SET user_name='user', 
         application='hello_world', job_limit=10"

  echo "$QUERY" | mysql -u examplemysqluser -p exampleprojectname

  export ESCAPEDQUERY=`echo "$QUERY" | sed "s/'/\\\\\'/g"`

  export UPDATEQUERY="INSERT INTO updates SET 
         servers='apache@exampleserver.somewhere.org',
         update_query='$ESCAPEDQUERY'"

  echo "$UPDATEQUERY" | mysql -u examplemysqluser -p exampleprojectname

By also inserting an update query into the server database for this,
slave servers will automatically synchronize and also apply them if
needed. It also allows the easy addition of more slave servers as was
shown in part III. To make this easier, one can use the UpdateDB script
located in the tools subdirectory:

  tools/UpdateDB "INSERT INTO users_allowed SET user_name='user',
                 application='hello_world', job_limit=10" 
                 "apache@exampleserver.somewhere.org" -u examplemysqluser 
                 -p exampleprojectname

To insert a new resource into the database use the following commands:

   export CERTIFICATE=`cat newresource.crt`

   tools/UpdateDB "INSERT INTO active_resources SET resource_name=
              'user@newresource.somewere.org',project_server=0, url=
              'user@newresource.somewere.org', client_certificate=
              '$CERTIFICATE\n'" "any" -u examplemysqluser -p exampleprojectname

Beware, if you have password protected the account for user examplemysqluser
in MySQL, you need to type in your password twice with this UpdateDB script.

Please read in the docs subdirectory the full details on the structure
of the database, what the fields mean and what values you can assign to 
them with MySQL queries like demonstrated.




