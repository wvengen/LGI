#!/bin/bash

# some settings...
export CERT_PASSWD=""
export VOMS="gaussian"
export LGI_DIR="${HOME}/LGI"
export X509_USER_PROXY=./x509_proxy_cert

# get repository url and download input...
export REPO_URL=`${LGI_DIR}/daemon/bin/xml repository_url < LGI_job_specifics`
export REPO_CONTENT=`${LGI_DIR}/daemon/bin/LGI_filetransfer list -x ${REPO_URL}`
export FILE_LIST=""
export NR_FILES=`echo ${REPO_CONTENT} | ${LGI_DIR}/daemon/bin/xml number_of_files`

for nr in `seq 1 ${NR_FILES}`
do
  export FILE_ATTR="number=\"${nr}\""
  export FILE_DATA=`echo ${REPO_CONTENT} | ${LGI_DIR}/daemon/bin/xml file ${FILE_ATTR}`
  export FILE_NAME=`echo ${FILE_DATA} | ${LGI_DIR}/daemon/bin/xml file_name`
  export FILE_LIST="${FILE_LIST} ${FILE_NAME}"
done

if [ "${FILE_LIST}" != "" ]
then
 ${LGI_DIR}/daemon/bin/LGI_filetransfer download ${REPO_URL} ${FILE_LIST} > /dev/null
fi

if [ -f g03.inp ]
then
 echo Input file g03.inp has been downloaded from repository ${REPO_URL}... > LGI_output
else
 cp LGI_input g03.inp > /dev/null
 echo Input copied... > LGI_output
fi

# convert to unix text...
dos2unix g03.inp > /dev/null
echo >> g03.inp
echo >> g03.inp

# register at myproxy myproxy.grid.cyf-kr.edu.pl...
echo ${CERT_PASSWD} | myproxy-init -s myproxy.grid.cyf-kr.edu.pl -d -n -S > /dev/null

# create new proxy cert for 196 hours...
echo ${CERT_PASSWD} | voms-proxy-init -voms ${VOMS} -valid 196:00 -pwstdin -q &> /dev/null

# create job script...
cat > g03.sh << EOF_SCRIPT
if [ "\${g03root}" == "" ]
then
    if [ "\${VO_GAUSSIAN_SW_DIR}" != "" ]
    then
        export g03root=\${VO_GAUSSIAN_SW_DIR}
    else
        echo No g03root or VO_GAUSSIAN_SW_DIR environment setting found...
        exit
    fi
fi

if [ -f \${g03root}/g03/bsd/g03.profile ]
then
 source \${g03root}/g03/bsd/g03.profile

 export GAUSS_SCRDIR=/tmp/gaussian_\$\$
 mkdir -p \$GAUSS_SCRDIR

 date
 g03 < g03.inp
 date

 rm -rf \$GAUSS_SCRDIR
else
 export HOST=`hostname -f`
 echo Could not source G03 profile script...
 echo
 echo Hostname: \${HOST}
 echo
 echo g03root: \${g03root}
 echo
 echo ls -laFR \${g03root}:
 echo
 ls -laFr \${g03root}
 echo
 echo Environment:
 echo
 env
 echo
 echo
fi
EOF_SCRIPT

# create JDL for this job script...
cat > g03.jdl << EOF_JDL
type = "Job";
jobtype = "Normal";
executable = "/bin/bash";
arguments = "g03.sh";
stdoutput = "g03.stdout";
stderror = "g03.stderr";
outputsandbox = { "g03.stdout", "g03.stderr" };
inputsandbox = { "g03.inp", "g03.sh" };
shallowretrycount = 3;
requirements = ( regexp( "cyf-kr.edu.pl", other.glueceuniqueid ) && other.glueceinfototalcpus >= 1 && other.gluecepolicymaxcputime > 720 );
myproxyserver = "myproxy.grid.cyf-kr.edu.pl";
EOF_JDL

# create and submit new job from JDL...
export RUNNING=""
while [ "${RUNNING}" == "" ]
do
 glite-wms-job-submit -a -o ${HOME}/my-glite-jobs g03.jdl | grep https | grep 9000 | tail -1 &> ./running
 export RUNNING=`cat ./running | grep -E '^https'`
done

export JOB_ID=`cat ./running`
echo Job ${JOB_ID} submitted to glite... >> LGI_output

# wait until job is finished, sleep a bit...
export JOB_STATE=""
while [ "${JOB_STATE}" == "" ]
do
    sleep 300
    export JOB_ID=`cat ./running`
    export JOB_STATE=`glite-wms-job-status ${JOB_ID} | grep "Current Status" | grep -iE "Done|Cancelled|Cleared|Aborted"`
done
echo Job ${JOB_ID} finished, retrieving output... >> LGI_output

# retrieve the output now...
glite-wms-job-output --dir ./output-files ${JOB_ID} &> /dev/null

# send back the output to LGI server...
${LGI_DIR}/daemon/bin/LGI_filetransfer upload ${REPO_URL} ./output-files/* > /dev/null
echo Uploaded output to repository ${REPO_URL}... >> LGI_output

# and we are finished...
touch ./finished
