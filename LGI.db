--
-- Table structure for table `active_resources`
--

DROP TABLE IF EXISTS active_resources;
CREATE TABLE active_resources (
  resource_id int(10) unsigned NOT NULL auto_increment,
  resource_name tinytext NOT NULL,
  client_certificate blob NOT NULL,
  last_call_time int(10) unsigned NOT NULL default '0',
  project_server int(10) unsigned NOT NULL default '0',
  url tinytext NOT NULL,
  resource_capabilities text NOT NULL default '',
  PRIMARY KEY  (resource_id), 
  UNIQUE KEY (resource_name(128)),
  KEY (project_server)
) TYPE=InnoDB;

--
-- Table structure for table `groups_allowed`
--

DROP TABLE IF EXISTS groups_allowed;
CREATE TABLE groups_allowed (
  group_name tinytext NOT NULL,
  application tinytext NOT NULL,
  job_limit int(10) NOT NULL default '0',
  PRIMARY KEY  (group_name(128),application(128))
) TYPE=MyISAM;

--
-- Table structure for table `groups_denied`
--

DROP TABLE IF EXISTS groups_denied;
CREATE TABLE groups_denied (
  group_name tinytext NOT NULL,
  application tinytext NOT NULL,
  PRIMARY KEY  (group_name(128),application(128))
) TYPE=MyISAM;

--
-- Table structure for table `job_queue`
--

DROP TABLE IF EXISTS job_queue;
CREATE TABLE job_queue (
  job_id int(10) unsigned NOT NULL auto_increment,
  state tinytext NOT NULL,
  application tinytext NOT NULL,
  owners tinytext NOT NULL,
  read_access tinytext NOT NULL,
  write_access tinytext NOT NULL,
  target_resources tinytext NOT NULL,
  input blob NOT NULL,
  output blob NOT NULL,
  job_specifics text NOT NULL,
  lock_state int(10) unsigned NOT NULL default '0',
  state_time_stamp int(10) unsigned NOT NULL default '0',
  priority int(10) unsigned NOT NULL default '0',
  daemon_pulse int(10) unsigned NOT NULL default '0',
  PRIMARY KEY  (job_id),
  KEY (priority),
  KEY (state_time_stamp),
  KEY (application(128),priority),
  KEY (application(128),state_time_stamp),
  KEY (state(128),priority),
  KEY (state(128),state_time_stamp),
  KEY (application(128),state(128),priority),
  KEY (application(128),state(128),state_time_stamp)
) TYPE=InnoDB;

--
-- Table structure for table `running_sessions`
--

DROP TABLE IF EXISTS running_sessions;
CREATE TABLE running_sessions (
  session_id int(10) unsigned NOT NULL auto_increment,
  resource_id int(10) unsigned NOT NULL default '0',
  session_time_stamp int(10) unsigned NOT NULL default '0',
  PRIMARY KEY  (session_id),
  KEY (session_id,resource_id)
) TYPE=InnoDB;

--
-- Table structure for table `event_queue`
--

DROP TABLE IF EXISTS event_queue;
CREATE TABLE event_queue (
  event tinytext NOT NULL,
  event_time_stamp int(10) unsigned NOT NULL default '0',
  PRIMARY KEY  (event(128),event_time_stamp),
  KEY (event_time_stamp)
) TYPE=InnoDB;

--
-- Table structure for table `running_locks`
--

DROP TABLE IF EXISTS running_locks;
CREATE TABLE running_locks (
  lock_id int(10) unsigned NOT NULL auto_increment,
  job_id int(10) unsigned NOT NULL default '0',
  resource_id int(10) NOT NULL default '0',
  lock_time int(10) unsigned NOT NULL default '0',
  session_id int(10) unsigned NOT NULL default '0',
  PRIMARY KEY  (lock_id),
  KEY (session_id),
  KEY (job_id),
  KEY (session_id,resource_id),
  KEY (job_id,session_id,resource_id)
) TYPE=InnoDB;

--
-- Table structure for table `updates`
--

DROP TABLE IF EXISTS updates;
CREATE TABLE updates (
  version int(10) unsigned NOT NULL auto_increment,
  servers tinytext NOT NULL,
  update_query blob NOT NULL,
  PRIMARY KEY  (version)
) TYPE=MyISAM;

--
-- Table structure for table `users_allowed`
--

DROP TABLE IF EXISTS users_allowed;
CREATE TABLE users_allowed (
  user_name tinytext NOT NULL,
  application tinytext NOT NULL,
  job_limit int(10) NOT NULL default '0',
  PRIMARY KEY  (user_name(128),application(128))
) TYPE=MyISAM;

--
-- Dumping data for table `users_allowed`
--

INSERT INTO users_allowed VALUES ('any','any',2);

--
-- Table structure for table `users_denied`
--

DROP TABLE IF EXISTS users_denied;
CREATE TABLE users_denied (
  user_name tinytext NOT NULL,
  application tinytext NOT NULL,
  PRIMARY KEY  (user_name(128),application(128))
) TYPE=MyISAM;


